package com.bizwink.po;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class ArticleTypeExample  implements Serializable {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table TBL_TYPE
     *
     * @mbggenerated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table TBL_TYPE
     *
     * @mbggenerated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table TBL_TYPE
     *
     * @mbggenerated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table TBL_TYPE
     *
     * @mbggenerated
     */
    public ArticleTypeExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table TBL_TYPE
     *
     * @mbggenerated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table TBL_TYPE
     *
     * @mbggenerated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table TBL_TYPE
     *
     * @mbggenerated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table TBL_TYPE
     *
     * @mbggenerated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table TBL_TYPE
     *
     * @mbggenerated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table TBL_TYPE
     *
     * @mbggenerated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table TBL_TYPE
     *
     * @mbggenerated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table TBL_TYPE
     *
     * @mbggenerated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table TBL_TYPE
     *
     * @mbggenerated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table TBL_TYPE
     *
     * @mbggenerated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table TBL_TYPE
     *
     * @mbggenerated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andIDIsNull() {
            addCriterion("ID is null");
            return (Criteria) this;
        }

        public Criteria andIDIsNotNull() {
            addCriterion("ID is not null");
            return (Criteria) this;
        }

        public Criteria andIDEqualTo(BigDecimal value) {
            addCriterion("ID =", value, "ID");
            return (Criteria) this;
        }

        public Criteria andIDNotEqualTo(BigDecimal value) {
            addCriterion("ID <>", value, "ID");
            return (Criteria) this;
        }

        public Criteria andIDGreaterThan(BigDecimal value) {
            addCriterion("ID >", value, "ID");
            return (Criteria) this;
        }

        public Criteria andIDGreaterThanOrEqualTo(BigDecimal value) {
            addCriterion("ID >=", value, "ID");
            return (Criteria) this;
        }

        public Criteria andIDLessThan(BigDecimal value) {
            addCriterion("ID <", value, "ID");
            return (Criteria) this;
        }

        public Criteria andIDLessThanOrEqualTo(BigDecimal value) {
            addCriterion("ID <=", value, "ID");
            return (Criteria) this;
        }

        public Criteria andIDIn(List<BigDecimal> values) {
            addCriterion("ID in", values, "ID");
            return (Criteria) this;
        }

        public Criteria andIDNotIn(List<BigDecimal> values) {
            addCriterion("ID not in", values, "ID");
            return (Criteria) this;
        }

        public Criteria andIDBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("ID between", value1, value2, "ID");
            return (Criteria) this;
        }

        public Criteria andIDNotBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("ID not between", value1, value2, "ID");
            return (Criteria) this;
        }

        public Criteria andCOLUMNIDIsNull() {
            addCriterion("COLUMNID is null");
            return (Criteria) this;
        }

        public Criteria andCOLUMNIDIsNotNull() {
            addCriterion("COLUMNID is not null");
            return (Criteria) this;
        }

        public Criteria andCOLUMNIDEqualTo(BigDecimal value) {
            addCriterion("COLUMNID =", value, "COLUMNID");
            return (Criteria) this;
        }

        public Criteria andCOLUMNIDNotEqualTo(BigDecimal value) {
            addCriterion("COLUMNID <>", value, "COLUMNID");
            return (Criteria) this;
        }

        public Criteria andCOLUMNIDGreaterThan(BigDecimal value) {
            addCriterion("COLUMNID >", value, "COLUMNID");
            return (Criteria) this;
        }

        public Criteria andCOLUMNIDGreaterThanOrEqualTo(BigDecimal value) {
            addCriterion("COLUMNID >=", value, "COLUMNID");
            return (Criteria) this;
        }

        public Criteria andCOLUMNIDLessThan(BigDecimal value) {
            addCriterion("COLUMNID <", value, "COLUMNID");
            return (Criteria) this;
        }

        public Criteria andCOLUMNIDLessThanOrEqualTo(BigDecimal value) {
            addCriterion("COLUMNID <=", value, "COLUMNID");
            return (Criteria) this;
        }

        public Criteria andCOLUMNIDIn(List<BigDecimal> values) {
            addCriterion("COLUMNID in", values, "COLUMNID");
            return (Criteria) this;
        }

        public Criteria andCOLUMNIDNotIn(List<BigDecimal> values) {
            addCriterion("COLUMNID not in", values, "COLUMNID");
            return (Criteria) this;
        }

        public Criteria andCOLUMNIDBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("COLUMNID between", value1, value2, "COLUMNID");
            return (Criteria) this;
        }

        public Criteria andCOLUMNIDNotBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("COLUMNID not between", value1, value2, "COLUMNID");
            return (Criteria) this;
        }

        public Criteria andPARENTIDIsNull() {
            addCriterion("PARENTID is null");
            return (Criteria) this;
        }

        public Criteria andPARENTIDIsNotNull() {
            addCriterion("PARENTID is not null");
            return (Criteria) this;
        }

        public Criteria andPARENTIDEqualTo(BigDecimal value) {
            addCriterion("PARENTID =", value, "PARENTID");
            return (Criteria) this;
        }

        public Criteria andPARENTIDNotEqualTo(BigDecimal value) {
            addCriterion("PARENTID <>", value, "PARENTID");
            return (Criteria) this;
        }

        public Criteria andPARENTIDGreaterThan(BigDecimal value) {
            addCriterion("PARENTID >", value, "PARENTID");
            return (Criteria) this;
        }

        public Criteria andPARENTIDGreaterThanOrEqualTo(BigDecimal value) {
            addCriterion("PARENTID >=", value, "PARENTID");
            return (Criteria) this;
        }

        public Criteria andPARENTIDLessThan(BigDecimal value) {
            addCriterion("PARENTID <", value, "PARENTID");
            return (Criteria) this;
        }

        public Criteria andPARENTIDLessThanOrEqualTo(BigDecimal value) {
            addCriterion("PARENTID <=", value, "PARENTID");
            return (Criteria) this;
        }

        public Criteria andPARENTIDIn(List<BigDecimal> values) {
            addCriterion("PARENTID in", values, "PARENTID");
            return (Criteria) this;
        }

        public Criteria andPARENTIDNotIn(List<BigDecimal> values) {
            addCriterion("PARENTID not in", values, "PARENTID");
            return (Criteria) this;
        }

        public Criteria andPARENTIDBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("PARENTID between", value1, value2, "PARENTID");
            return (Criteria) this;
        }

        public Criteria andPARENTIDNotBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("PARENTID not between", value1, value2, "PARENTID");
            return (Criteria) this;
        }

        public Criteria andREFERIDIsNull() {
            addCriterion("REFERID is null");
            return (Criteria) this;
        }

        public Criteria andREFERIDIsNotNull() {
            addCriterion("REFERID is not null");
            return (Criteria) this;
        }

        public Criteria andREFERIDEqualTo(BigDecimal value) {
            addCriterion("REFERID =", value, "REFERID");
            return (Criteria) this;
        }

        public Criteria andREFERIDNotEqualTo(BigDecimal value) {
            addCriterion("REFERID <>", value, "REFERID");
            return (Criteria) this;
        }

        public Criteria andREFERIDGreaterThan(BigDecimal value) {
            addCriterion("REFERID >", value, "REFERID");
            return (Criteria) this;
        }

        public Criteria andREFERIDGreaterThanOrEqualTo(BigDecimal value) {
            addCriterion("REFERID >=", value, "REFERID");
            return (Criteria) this;
        }

        public Criteria andREFERIDLessThan(BigDecimal value) {
            addCriterion("REFERID <", value, "REFERID");
            return (Criteria) this;
        }

        public Criteria andREFERIDLessThanOrEqualTo(BigDecimal value) {
            addCriterion("REFERID <=", value, "REFERID");
            return (Criteria) this;
        }

        public Criteria andREFERIDIn(List<BigDecimal> values) {
            addCriterion("REFERID in", values, "REFERID");
            return (Criteria) this;
        }

        public Criteria andREFERIDNotIn(List<BigDecimal> values) {
            addCriterion("REFERID not in", values, "REFERID");
            return (Criteria) this;
        }

        public Criteria andREFERIDBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("REFERID between", value1, value2, "REFERID");
            return (Criteria) this;
        }

        public Criteria andREFERIDNotBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("REFERID not between", value1, value2, "REFERID");
            return (Criteria) this;
        }

        public Criteria andCNAMEIsNull() {
            addCriterion("CNAME is null");
            return (Criteria) this;
        }

        public Criteria andCNAMEIsNotNull() {
            addCriterion("CNAME is not null");
            return (Criteria) this;
        }

        public Criteria andCNAMEEqualTo(String value) {
            addCriterion("CNAME =", value, "CNAME");
            return (Criteria) this;
        }

        public Criteria andCNAMENotEqualTo(String value) {
            addCriterion("CNAME <>", value, "CNAME");
            return (Criteria) this;
        }

        public Criteria andCNAMEGreaterThan(String value) {
            addCriterion("CNAME >", value, "CNAME");
            return (Criteria) this;
        }

        public Criteria andCNAMEGreaterThanOrEqualTo(String value) {
            addCriterion("CNAME >=", value, "CNAME");
            return (Criteria) this;
        }

        public Criteria andCNAMELessThan(String value) {
            addCriterion("CNAME <", value, "CNAME");
            return (Criteria) this;
        }

        public Criteria andCNAMELessThanOrEqualTo(String value) {
            addCriterion("CNAME <=", value, "CNAME");
            return (Criteria) this;
        }

        public Criteria andCNAMELike(String value) {
            addCriterion("CNAME like", value, "CNAME");
            return (Criteria) this;
        }

        public Criteria andCNAMENotLike(String value) {
            addCriterion("CNAME not like", value, "CNAME");
            return (Criteria) this;
        }

        public Criteria andCNAMEIn(List<String> values) {
            addCriterion("CNAME in", values, "CNAME");
            return (Criteria) this;
        }

        public Criteria andCNAMENotIn(List<String> values) {
            addCriterion("CNAME not in", values, "CNAME");
            return (Criteria) this;
        }

        public Criteria andCNAMEBetween(String value1, String value2) {
            addCriterion("CNAME between", value1, value2, "CNAME");
            return (Criteria) this;
        }

        public Criteria andCNAMENotBetween(String value1, String value2) {
            addCriterion("CNAME not between", value1, value2, "CNAME");
            return (Criteria) this;
        }

        public Criteria andCREATEDATEIsNull() {
            addCriterion("CREATEDATE is null");
            return (Criteria) this;
        }

        public Criteria andCREATEDATEIsNotNull() {
            addCriterion("CREATEDATE is not null");
            return (Criteria) this;
        }

        public Criteria andCREATEDATEEqualTo(Date value) {
            addCriterionForJDBCDate("CREATEDATE =", value, "CREATEDATE");
            return (Criteria) this;
        }

        public Criteria andCREATEDATENotEqualTo(Date value) {
            addCriterionForJDBCDate("CREATEDATE <>", value, "CREATEDATE");
            return (Criteria) this;
        }

        public Criteria andCREATEDATEGreaterThan(Date value) {
            addCriterionForJDBCDate("CREATEDATE >", value, "CREATEDATE");
            return (Criteria) this;
        }

        public Criteria andCREATEDATEGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("CREATEDATE >=", value, "CREATEDATE");
            return (Criteria) this;
        }

        public Criteria andCREATEDATELessThan(Date value) {
            addCriterionForJDBCDate("CREATEDATE <", value, "CREATEDATE");
            return (Criteria) this;
        }

        public Criteria andCREATEDATELessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("CREATEDATE <=", value, "CREATEDATE");
            return (Criteria) this;
        }

        public Criteria andCREATEDATEIn(List<Date> values) {
            addCriterionForJDBCDate("CREATEDATE in", values, "CREATEDATE");
            return (Criteria) this;
        }

        public Criteria andCREATEDATENotIn(List<Date> values) {
            addCriterionForJDBCDate("CREATEDATE not in", values, "CREATEDATE");
            return (Criteria) this;
        }

        public Criteria andCREATEDATEBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("CREATEDATE between", value1, value2, "CREATEDATE");
            return (Criteria) this;
        }

        public Criteria andCREATEDATENotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("CREATEDATE not between", value1, value2, "CREATEDATE");
            return (Criteria) this;
        }

        public Criteria andENAMEIsNull() {
            addCriterion("ENAME is null");
            return (Criteria) this;
        }

        public Criteria andENAMEIsNotNull() {
            addCriterion("ENAME is not null");
            return (Criteria) this;
        }

        public Criteria andENAMEEqualTo(String value) {
            addCriterion("ENAME =", value, "ENAME");
            return (Criteria) this;
        }

        public Criteria andENAMENotEqualTo(String value) {
            addCriterion("ENAME <>", value, "ENAME");
            return (Criteria) this;
        }

        public Criteria andENAMEGreaterThan(String value) {
            addCriterion("ENAME >", value, "ENAME");
            return (Criteria) this;
        }

        public Criteria andENAMEGreaterThanOrEqualTo(String value) {
            addCriterion("ENAME >=", value, "ENAME");
            return (Criteria) this;
        }

        public Criteria andENAMELessThan(String value) {
            addCriterion("ENAME <", value, "ENAME");
            return (Criteria) this;
        }

        public Criteria andENAMELessThanOrEqualTo(String value) {
            addCriterion("ENAME <=", value, "ENAME");
            return (Criteria) this;
        }

        public Criteria andENAMELike(String value) {
            addCriterion("ENAME like", value, "ENAME");
            return (Criteria) this;
        }

        public Criteria andENAMENotLike(String value) {
            addCriterion("ENAME not like", value, "ENAME");
            return (Criteria) this;
        }

        public Criteria andENAMEIn(List<String> values) {
            addCriterion("ENAME in", values, "ENAME");
            return (Criteria) this;
        }

        public Criteria andENAMENotIn(List<String> values) {
            addCriterion("ENAME not in", values, "ENAME");
            return (Criteria) this;
        }

        public Criteria andENAMEBetween(String value1, String value2) {
            addCriterion("ENAME between", value1, value2, "ENAME");
            return (Criteria) this;
        }

        public Criteria andENAMENotBetween(String value1, String value2) {
            addCriterion("ENAME not between", value1, value2, "ENAME");
            return (Criteria) this;
        }

        public Criteria andFLAGIsNull() {
            addCriterion("FLAG is null");
            return (Criteria) this;
        }

        public Criteria andFLAGIsNotNull() {
            addCriterion("FLAG is not null");
            return (Criteria) this;
        }

        public Criteria andFLAGEqualTo(Short value) {
            addCriterion("FLAG =", value, "FLAG");
            return (Criteria) this;
        }

        public Criteria andFLAGNotEqualTo(Short value) {
            addCriterion("FLAG <>", value, "FLAG");
            return (Criteria) this;
        }

        public Criteria andFLAGGreaterThan(Short value) {
            addCriterion("FLAG >", value, "FLAG");
            return (Criteria) this;
        }

        public Criteria andFLAGGreaterThanOrEqualTo(Short value) {
            addCriterion("FLAG >=", value, "FLAG");
            return (Criteria) this;
        }

        public Criteria andFLAGLessThan(Short value) {
            addCriterion("FLAG <", value, "FLAG");
            return (Criteria) this;
        }

        public Criteria andFLAGLessThanOrEqualTo(Short value) {
            addCriterion("FLAG <=", value, "FLAG");
            return (Criteria) this;
        }

        public Criteria andFLAGIn(List<Short> values) {
            addCriterion("FLAG in", values, "FLAG");
            return (Criteria) this;
        }

        public Criteria andFLAGNotIn(List<Short> values) {
            addCriterion("FLAG not in", values, "FLAG");
            return (Criteria) this;
        }

        public Criteria andFLAGBetween(Short value1, Short value2) {
            addCriterion("FLAG between", value1, value2, "FLAG");
            return (Criteria) this;
        }

        public Criteria andFLAGNotBetween(Short value1, Short value2) {
            addCriterion("FLAG not between", value1, value2, "FLAG");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table TBL_TYPE
     *
     * @mbggenerated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table TBL_TYPE
     *
     * @mbggenerated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}